import numpy as np
import pandas as pd
import gym

# Define the environment
env = gym.make("CartPole-v1")

# Define the Q-table
num_states = env.observation_space.shape[0]
num_actions = env.action_space.n
q_table = np.zeros((num_states, num_actions))
# Define the hyperparameters
num_episodes = 1000
max_steps_per_episode = 100
learning_rate = 0.1
discount_rate = 0.99
exploration_rate = 1
max_exploration_rate = 1
min_exploration_rate = 0.01
exploration_decay_rate = 0.001

# Implement the Q-learning algorithm
for episode in range(num_episodes):
    state = env.reset()
    done = False
    rewards_current_episode = 0
    
    for step in range(max_steps_per_episode):
        # Exploration-exploitation trade-off
        exploration_rate_threshold = np.random.uniform(0, 1)
        if exploration_rate_threshold > exploration_rate:
            action = np.argmax(q_table[state,:])
        else:
            action = env.action_space.sample()
        
        # Take the action and observe the next state and reward
        new_state, reward, done, info = env.step(action)
        
        # Update the Q-table
        q_table[state, action] = q_table[state, action] * (1 - learning_rate) + \
                                 learning_rate * (reward + discount_rate * np.max(q_table[new_state, :]))
        
        # Transition to the next state
        state = new_state
        rewards_current_episode += reward
        
        if done:
            break
        
    # Exploration rate decay
    exploration_rate = min_exploration_rate + \
                       (max_exploration_rate - min_exploration_rate) * np.exp(-exploration_decay_rate * episode)
    
    # Print the rewards per episode
    print("Total Rewards in Episode {}: {}".format(episode, rewards_current_episode))

# Evaluate the trained model
total_rewards = []
for episode in range(100):
    state = env.reset()
    done = False
    rewards_current_episode = 0
    
    for step in range(max_steps_per_episode):
        action = np.argmax(q_table[state,:])
        
        new_state, reward, done, info = env.step(action)
        state = new_state
        rewards_current_episode += reward
        
        if done:
            break
    
    total_rewards.append(rewards_current_episode)

print("Average Total Rewards over 100 Episodes:", np.mean(total_rewards))

